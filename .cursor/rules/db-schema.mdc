---
description: 
globs: **/prisma/schema.prisma
alwaysApply: false
---
# Guidelines for Prisma Schema Integration

## Purpose & Overview
These rules define the standard patterns for working with Prisma-generated schemas and integrating them with the application's type system. The guidelines ensure consistent handling of database types across the codebase.

## Schema Integration Pattern

### Type Override Pattern
Follow this pattern for overriding Prisma-generated types to ensure consistent handling of fields:

```typescript
/**
 * Utility type to override specific field types from Prisma-generated tables:
 * - DATE fields: converted to `Date | string` if not null else `Date | string | null`
 * - JSON fields: specific type overrides with proper typing
 * - DEFAULT fields: explicit type definition without Generated wrapper
 */
type OverrideCommonFields<TTable> = Omit<
  TTable,
  'id' | 'created_at' | 'updated_at' | 'deleted_at'
> & {
  id: string;
  created_at: Date | string;
  updated_at: Date | string;
  deleted_at: Date | string | null;
};
```

### Field-Specific Overrides
For fields requiring specific types beyond common fields:

```typescript
type OverrideEntityName = Omit<OverrideCommonFields<entity_name>, 'specific_field'> & {
  specific_field: SpecificType;
};

export type EntityName = OverrideEntityName;
```

## When to Override Types

1. **Common Fields**:
   - `id`: Always override to remove `Generated<>` wrapper
   - `created_at`, `updated_at`: Always override to allow both `Date` and `string` types
   - `deleted_at`: Always override to allow `Date`, `string`, or `null`

2. **Specific Fields**:
   - **Enum Fields**: Override to use the explicit enum type instead of the Prisma-generated type
   - **JSON Fields**: Override with a properly typed structure rather than `unknown`
   - **Fields with Defaults**: Override to remove the `Generated<>` wrapper

3. **Relation Fields**:
   - For relation fields, override with the proper entity type

## Example Implementation

For a table with the following Prisma schema:

```prisma
model Entity {
  id          String      @id @default(uuid())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?   
  status      Status      @default(ACTIVE)
  metadata    Json?
  // Relations
  related     Related[]
}
```

The type override would look like:

```typescript
import { type entity, type Status } from './types';

type OverrideEntity = Omit<OverrideCommonFields<entity>, 'status' | 'metadata'> & {
  status: Status;
  metadata: EntityMetadata | null;
};

type EntityMetadata = {
  key1: string;
  key2: number;
  // Other metadata fields
};

export type Entity = OverrideEntity;
```

## Best Practices

1. **Consistency**: Follow the same pattern for all entity types
2. **Type Safety**: Ensure proper typing for JSON fields to leverage TypeScript type checking
3. **Documentation**: Document any complex type overrides with comments
4. **Minimalism**: Only override fields that need specific typing beyond the Prisma defaults
5. **Exports**: Export the final overridden types for use throughout the application

## Type Export Convention

Follow this naming convention for exported types:

```typescript
// Original Prisma-generated type: users
// Exported type name: User (singular, PascalCase)

export type User = OverrideUsers;
``` 